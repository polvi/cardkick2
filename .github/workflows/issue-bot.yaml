name: Issue Bot

on:
  issues:
    types: [opened]
  issue_comment:
    types: [created]

jobs:
  update-code:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install aider
        run: |
          python -m pip install --upgrade pip
          python -m pip install aider-install
          aider-install
          
      - name: Create branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          BRANCH_NAME="fix/issue-${{ github.event.issue.number }}"
          git checkout -b $BRANCH_NAME
          
      - name: Update code with aider
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Create EDITS file from issue and README context
          echo "Update the code based on this issue, considering the project's README and maintaining its documented features and principles:" > EDITS
          echo "Title: ${{ github.event.issue.title }}" >> EDITS
          echo "Description: ${{ github.event.issue.body }}" >> EDITS
          echo "" >> EDITS
          echo "Important context from README:" >> EDITS
          echo "$(cat README.md)" >> EDITS
          echo "" >> EDITS
          echo "Please ensure any changes:" >> EDITS
          echo "1. Maintain the privacy-first approach (all data stays in browser)" >> EDITS
          echo "2. Keep PWA functionality intact" >> EDITS
          echo "3. Update the README if new features are added or existing ones are modified" >> EDITS
          
          # Run aider with the correct parameters
          aider --model openrouter/anthropic/claude-3.5-sonnet --no-detect-urls --message-file EDITS --yes-always
          
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="fix/issue-${{ github.event.issue.number }}"
          git push --force origin $BRANCH_NAME
          
          # Create PR
          gh pr create \
            --title "Fix Issue #${{ github.event.issue.number }}" \
            --body "This PR addresses issue #${{ github.event.issue.number }}" \
            --base main \
            --head $BRANCH_NAME
            
      - name: Check for transcript-generated tag
        id: check_tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Check if issue has transcript-generated tag
          TAGS=$(gh issue view ${{ github.event.issue.number }} --json labels -q '.labels[].name')
          if echo "$TAGS" | grep -q "transcript-generated"; then
            echo "has_transcript_tag=true" >> $GITHUB_OUTPUT
          else
            echo "has_transcript_tag=false" >> $GITHUB_OUTPUT
          fi

      - name: Merge Pull Request
        if: steps.check_tag.outputs.has_transcript_tag != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          BRANCH_NAME="fix/issue-${{ github.event.issue.number }}"
          # Wait briefly for PR to be created
          sleep 5
          # Get PR number and merge it
          PR_NUMBER=$(gh pr list --head $BRANCH_NAME --json number -q '.[0].number')
          gh pr merge $PR_NUMBER --auto --merge
          
      - name: Close Issue
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Add thank you comment and close the issue
          if [[ "${{ steps.check_tag.outputs.has_transcript_tag }}" == "true" ]]; then
            gh issue comment ${{ github.event.issue.number }} --body "Thank you for your issue! A pull request has been created but requires manual review."
          else
            gh issue comment ${{ github.event.issue.number }} --body "Thank you for your issue! The changes have been merged."
            gh issue close ${{ github.event.issue.number }}
          fi

  update-pr:
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request && github.event.comment.user.login != 'github-actions[bot]'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install aider
        run: |
          python -m pip install --upgrade pip
          python -m pip install aider-install
          aider-install
          
      - name: Get PR details
        id: pr_details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.issue.number }}
          PR_DATA=$(gh pr view $PR_NUMBER --json title,body,headRefName)
          echo "PR_TITLE=$(echo "$PR_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "PR_BODY=$(echo "$PR_DATA" | jq -r '.body')" >> $GITHUB_OUTPUT
          echo "BRANCH_NAME=$(echo "$PR_DATA" | jq -r '.headRefName')" >> $GITHUB_OUTPUT
          
      - name: Checkout PR branch
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git fetch origin
          git checkout ${{ steps.pr_details.outputs.BRANCH_NAME }}
          git pull origin ${{ steps.pr_details.outputs.BRANCH_NAME }}
          
      - name: Get original issue number
        id: issue_number
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Extract issue number from PR body (assumes PR body contains "#<issue_number>")
          ISSUE_NUMBER=$(echo "${{ steps.pr_details.outputs.PR_BODY }}" | grep -o '#[0-9]\+' | head -1 | tr -d '#')
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_OUTPUT
          
      - name: Get original issue details
        id: issue_details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -n "${{ steps.issue_number.outputs.ISSUE_NUMBER }}" ]]; then
            ISSUE_DATA=$(gh issue view ${{ steps.issue_number.outputs.ISSUE_NUMBER }} --json title,body)
            echo "ISSUE_TITLE=$(echo "$ISSUE_DATA" | jq -r '.title')" >> $GITHUB_OUTPUT
            echo "ISSUE_BODY=$(echo "$ISSUE_DATA" | jq -r '.body')" >> $GITHUB_OUTPUT
          else
            echo "ISSUE_TITLE=Unknown" >> $GITHUB_OUTPUT
            echo "ISSUE_BODY=Could not determine original issue" >> $GITHUB_OUTPUT
          fi
          
      - name: Update code with aider based on comment
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Create EDITS file from PR context, original issue, and new comment
          echo "Update the code based on this pull request, the original issue, and the new comment:" > EDITS
          echo "PR Title: ${{ steps.pr_details.outputs.PR_TITLE }}" >> EDITS
          echo "PR Description: ${{ steps.pr_details.outputs.PR_BODY }}" >> EDITS
          echo "" >> EDITS
          echo "Original Issue Title: ${{ steps.issue_details.outputs.ISSUE_TITLE }}" >> EDITS
          echo "Original Issue Description: ${{ steps.issue_details.outputs.ISSUE_BODY }}" >> EDITS
          echo "" >> EDITS
          echo "New comment: ${{ github.event.comment.body }}" >> EDITS
          echo "" >> EDITS
          echo "Please ensure any changes:" >> EDITS
          echo "1. Maintain the privacy-first approach (all data stays in browser)" >> EDITS
          echo "2. Keep PWA functionality intact" >> EDITS
          echo "3. Update the README if new features are added or existing ones are modified" >> EDITS
          
          # Run aider with the correct parameters
          aider --model openrouter/anthropic/claude-3.5-sonnet --no-detect-urls --message-file EDITS --yes-always
          
      - name: Push changes
        run: |
          # Commit changes with a descriptive message
          git add .
          git commit -m "Update PR based on comment #${{ github.event.comment.id }}"
          git push origin ${{ steps.pr_details.outputs.BRANCH_NAME }}
          
      - name: Add comment to PR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh pr comment ${{ github.event.issue.number }} --body "I've updated the PR based on your comment. Please review the changes."
